// Define pin numbers
#define FLAME_SENSOR_PIN 2       // Flame sensor connected to digital pin 2
#define PUMP_RELAY_PIN 8        // Relay for controlling the DC pump connected to pin 8
#define TRIGGER_PIN 9           // Ultrasonic sensor trigger connected to pin 9
#define ECHO_PIN 10             // Ultrasonic sensor echo connected to pin 10

// Variables for ultrasonic sensor
long duration;
int distance;

// Setup the pins
void setup() {
  // Initialize flame sensor and pump relay pins
  pinMode(FLAME_SENSOR_PIN, INPUT);
  pinMode(PUMP_RELAY_PIN, OUTPUT);
  
  // Initialize ultrasonic sensor pins
  pinMode(TRIGGER_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);

  // Start serial communication for debugging
  Serial.begin(9600);
}

// Main loop
void loop() {
  // Read flame sensor value (HIGH if flame is detected, LOW if no flame)
  int flameStatus = digitalRead(FLAME_SENSOR_PIN);
  
  // Read ultrasonic sensor distance
  distance = getDistance();

  // Display distance for debugging
  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.println(" cm");

  // If flame is detected (flameStatus is HIGH) and no obstacle is detected (distance > 10 cm)
  if (flameStatus == HIGH && distance > 10) {
    digitalWrite(PUMP_RELAY_PIN, HIGH);  // Turn on the DC pump
    Serial.println("Flame detected, pump is ON");
  } 
  else {
    digitalWrite(PUMP_RELAY_PIN, LOW);   // Turn off the DC pump
    Serial.println("No flame or obstacle detected, pump is OFF");
  }

  delay(500);  // Delay for a while before taking another reading
}

// Function to get the distance from the ultrasonic sensor
long getDistance() {
  // Send a 10us pulse to trigger the ultrasonic sensor
  digitalWrite(TRIGGER_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIGGER_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIGGER_PIN, LOW);
  
  // Read the time it took for the echo to return
  duration = pulseIn(ECHO_PIN, HIGH);
  
  // Calculate distance in cm (speed of sound is 343m/s)
  long distance = (duration / 2) / 29.1;
  
  returnÂ distance;
}
